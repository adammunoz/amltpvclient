/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VentasDialogScreen.java
 *
 * Created on 07-jun-2009, 13:51:43
 */

package amltpvclient;


import java.awt.Color;
import java.awt.Cursor;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.UnknownHostException;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Locale;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.RowSorter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author adam
 */
public class VentasDialogScreen extends javax.swing.JDialog {
    private DefaultTableModel modelInfo,modelContents;
    private final int LCW = 25; //left column width
    private final int RCW = 200; //right column width
    private boolean processKey;
    private int teclaPressed;
    private boolean orange = false;
    private boolean modeMouse = false;
    private int currentMesa;
    private float total;
    private boolean modoBorrando = false;
    private RowSorter<TableModel> sorter;
    private amltpv.Impresora impresora = new amltpv.Impresora();
    /** Creates new form VentasDialogScreen */
    public VentasDialogScreen(java.awt.Frame parent, boolean modal,int currentMesa) {
        super(parent, modal);
        initComponents();
        this.currentMesa = currentMesa;
        modelInfo = (DefaultTableModel) tableInfo.getModel();
        tableInfo.getColumnModel().getColumn(0).setCellRenderer(new FormatRenderer(true));
        tableInfo.getColumnModel().getColumn(2).setCellRenderer(new FormatRenderer(true));
        //tableInfo.getColumnModel().getColumn(4).setCellRenderer(new FormatRenderer(true));

        tableInfo.getColumnModel().getColumn(0).setMaxWidth(LCW);
        tableInfo.getColumnModel().getColumn(2).setMaxWidth(LCW);
        //tableInfo.getColumnModel().getColumn(4).setMaxWidth(LCW);
        tableInfo.getColumnModel().getColumn(1).setMaxWidth(RCW);
        tableInfo.getColumnModel().getColumn(3).setMaxWidth(RCW);
        //tableInfo.getColumnModel().getColumn(5).setMaxWidth(RCW);
        
        contentsTable.getColumnModel().getColumn(2).setCellRenderer(new FormatRenderer());
        contentsTable.getColumnModel().getColumn(0).setCellRenderer(new FormatRenderer());
        modelContents = (DefaultTableModel) contentsTable.getModel();
        contentsTable.getColumnModel().getColumn(0).setMaxWidth(40);
        contentsTable.getColumnModel().getColumn(1).setMaxWidth(200);
        contentsTable.getColumnModel().getColumn(2).setMaxWidth(60);
        
        sorter = new TableRowSorter<TableModel>(modelContents);
        contentsTable.setRowSorter(sorter);
    
        codigoTextField.requestFocus();
        AmltpvViewClient.productosModel.resetCurrentNode();
        Enumeration children = AmltpvViewClient.productosModel.getRootNode().children();
        inputInfo(children);
        fillContentsTable();
        calculateTotal();
        
    }
    
    private void calculateTotal(){
        total = 0;
        Enumeration contents = AmltpvViewClient.db.queryMesaContents(Integer.toString(currentMesa));
        float precio;
        while (contents.hasMoreElements()){
            precio = AmltpvViewClient.productosModel.getPrice((String)contents.nextElement());
            total = total + precio;
        }
        totalLabel.setText(NumberFormat.getCurrencyInstance(new Locale("es","ES")).format(total));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonSalir = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        codigoTextField = new javax.swing.JTextField();
        introButton = new javax.swing.JButton();
        cantField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        salirButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        contentsTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableInfo = new javax.swing.JTable();
        infoLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        imprimirButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        borrarButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        totalLabel = new javax.swing.JLabel();

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setName("Form"); // NOI18N
        setResizable(false);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(amltpvclient.AmltpvClientApp.class).getContext().getResourceMap(VentasDialogScreen.class);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        codigoTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        codigoTextField.setText(resourceMap.getString("codigoTextField.text")); // NOI18N
        codigoTextField.setMargin(new java.awt.Insets(0, 2, 2, 2));
        codigoTextField.setName("codigoTextField"); // NOI18N
        codigoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codigoTextFieldActionPerformed(evt);
            }
        });
        codigoTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                codigoTextFieldKeyTyped(evt);
            }
        });

        introButton.setText(resourceMap.getString("introButton.text")); // NOI18N
        introButton.setMargin(new java.awt.Insets(0, 14, 2, 14));
        introButton.setName("introButton"); // NOI18N
        introButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                introButtonActionPerformed(evt);
            }
        });

        cantField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cantField.setText(resourceMap.getString("cantField.text")); // NOI18N
        cantField.setName("cantField"); // NOI18N
        cantField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cantFieldActionPerformed(evt);
            }
        });

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cantField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codigoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(introButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(codigoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cantField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(introButton)))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        salirButton.setFont(resourceMap.getFont("salirButton.font")); // NOI18N
        salirButton.setText(resourceMap.getString("salirButton.text")); // NOI18N
        salirButton.setName("salirButton"); // NOI18N
        salirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(salirButton, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(salirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        contentsTable.setFont(resourceMap.getFont("contentsTable.font")); // NOI18N
        contentsTable.setForeground(resourceMap.getColor("contentsTable.foreground")); // NOI18N
        contentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cant", "Producto", "Subtotal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        contentsTable.setName("contentsTable"); // NOI18N
        contentsTable.setRowHeight(30);
        contentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contentsTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(contentsTable);
        contentsTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("contentsTable.columnModel.title0")); // NOI18N
        contentsTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("contentsTable.columnModel.title1")); // NOI18N
        contentsTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("contentsTable.columnModel.title2")); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        tableInfo.setBackground(resourceMap.getColor("tableInfo.background")); // NOI18N
        tableInfo.setFont(resourceMap.getFont("tableInfo.font")); // NOI18N
        tableInfo.setForeground(resourceMap.getColor("tableInfo.foreground")); // NOI18N
        tableInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Producto", "", "Producto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableInfo.setCellSelectionEnabled(true);
        tableInfo.setGridColor(resourceMap.getColor("tableInfo.gridColor")); // NOI18N
        tableInfo.setName("tableInfo"); // NOI18N
        tableInfo.setRowHeight(60);
        tableInfo.setRowMargin(10);
        tableInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableInfoMouseClicked(evt);
            }
        });
        tableInfo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tableInfoMouseMoved(evt);
            }
        });
        jScrollPane4.setViewportView(tableInfo);
        tableInfo.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tableInfo.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tableInfo.columnModel.title0")); // NOI18N
        tableInfo.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tableInfo.columnModel.title1")); // NOI18N
        tableInfo.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tableInfo.columnModel.title2")); // NOI18N
        tableInfo.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tableInfo.columnModel.title3")); // NOI18N

        infoLabel.setFont(resourceMap.getFont("infoLabel.font")); // NOI18N
        infoLabel.setForeground(resourceMap.getColor("infoLabel.foreground")); // NOI18N
        infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLabel.setText(resourceMap.getString("infoLabel.text")); // NOI18N
        infoLabel.setName("infoLabel"); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), resourceMap.getString("jPanel3.border.title"))); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N

        imprimirButton.setFont(resourceMap.getFont("imprimirButton.font")); // NOI18N
        imprimirButton.setText(resourceMap.getString("imprimirButton.text")); // NOI18N
        imprimirButton.setName("imprimirButton"); // NOI18N
        imprimirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirButtonActionPerformed(evt);
            }
        });

        jButton4.setFont(resourceMap.getFont("jButton4.font")); // NOI18N
        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N

        jButton5.setFont(resourceMap.getFont("jButton5.font")); // NOI18N
        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setName("jButton5"); // NOI18N

        borrarButton.setFont(resourceMap.getFont("borrarButton.font")); // NOI18N
        borrarButton.setText(resourceMap.getString("borrarButton.text")); // NOI18N
        borrarButton.setName("borrarButton"); // NOI18N
        borrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(borrarButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(imprimirButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(imprimirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(borrarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), resourceMap.getString("jPanel4.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel4.border.titleFont"))); // NOI18N
        jPanel4.setName("jPanel4"); // NOI18N

        totalLabel.setFont(resourceMap.getFont("totalLabel.font")); // NOI18N
        totalLabel.setForeground(resourceMap.getColor("totalLabel.foreground")); // NOI18N
        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalLabel.setText(resourceMap.getString("totalLabel.text")); // NOI18N
        totalLabel.setName("totalLabel"); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(totalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void codigoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codigoTextFieldActionPerformed
        introButtonActionPerformed(evt);
}//GEN-LAST:event_codigoTextFieldActionPerformed

    private void cantFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cantFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_cantFieldActionPerformed

    private void codigoTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoTextFieldKeyTyped
        modeMouse = false;
        if (processKey){
            teclaPressed = Integer.parseInt(Character.toString(evt.getKeyChar()));
            inputInfo(AmltpvViewClient.productosModel.browse(teclaPressed,infoLabel));
        }
}//GEN-LAST:event_codigoTextFieldKeyTyped

    private void codigoTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoTextFieldKeyPressed
        int keyCode = evt.getKeyCode();
        if(keyCode==KeyEvent.VK_BACK_SPACE){
            processKey = false;
            if (AmltpvViewClient.productosModel.getCurrentNode().equals(AmltpvViewClient.productosModel.getRootNode())){
                System.out.println("nothing");
            }
            else{
                AmltpvViewClient.productosModel.upCurrentNode(infoLabel);
                inputInfo(AmltpvViewClient.productosModel.getCurrentNode().children());
            }
        }

        else if (keyCode==KeyEvent.VK_ENTER){
            processKey = false;
            System.out.println("enter");
        }
        else{
            processKey = true;
        }
    }//GEN-LAST:event_codigoTextFieldKeyPressed

    private void tableInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableInfoMouseClicked
        modeMouse = true;
        Point p = evt.getPoint();
        int row = tableInfo.rowAtPoint(p);
        int column = tableInfo.columnAtPoint(p);
        if (evt.getButton()==MouseEvent.BUTTON1){
            inputInfo(AmltpvViewClient.productosModel.browse((Integer) tableInfo.getValueAt(row, column-1),infoLabel));
        }
        if (evt.getButton()==MouseEvent.BUTTON3){
            AmltpvViewClient.productosModel.upCurrentNode(infoLabel);
            inputInfo(AmltpvViewClient.productosModel.getCurrentNode().children());
        }
    }//GEN-LAST:event_tableInfoMouseClicked

    private void tableInfoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableInfoMouseMoved
        Point p = evt.getPoint();
        int row = tableInfo.rowAtPoint(p);
        int column = tableInfo.columnAtPoint(p);
        if (column == 1 || column == 3 || column == 5){
            tableInfo.changeSelection(row, column, false, false);
        }
    }//GEN-LAST:event_tableInfoMouseMoved
    private void fillContentsTable(){
        Enumeration mesaContents = AmltpvViewClient.db.queryMesaContents(Integer.toString(currentMesa));
        Hashtable hash = new Hashtable();
        String producto;
        int cant;
        while (mesaContents.hasMoreElements()){
            producto = (String) mesaContents.nextElement();
            if (hash.get(producto)!=null){
                cant = (Integer) hash.get(producto);

            }
            else{
                cant = 0;
            }
            hash.put(producto,cant+1);
        }


        mesaContents = hash.keys();
        float price;
        ArrayList sortedKeys = new ArrayList();
        while (mesaContents.hasMoreElements()){
            producto = (String) mesaContents.nextElement();
            sortedKeys.add(producto);

            //cant = (Integer) hash.get(categoria);
            //price = AmltpvViewClient.productosModel.getPrice(categoria);
            //String subTotal = NumberFormat.getCurrencyInstance(new Locale("es","ES")).format(cant*price);
            //modelContents.addRow(new Object[] {cant,categoria,subTotal});
        }
        Collections.sort(sortedKeys);
        Iterator i = sortedKeys.iterator();
        while (i.hasNext()){
            producto = (String) i.next();
            cant = (Integer) hash.get(producto);
            price = AmltpvViewClient.productosModel.getPrice(producto);
            String subTotal = NumberFormat.getCurrencyInstance(new Locale("es","ES")).format(cant*price);
            modelContents.addRow(new Object[] {Integer.toString(cant),producto,subTotal});
        }
    }
    private void addProductoToContentsTable(String producto){

        String cantStr =  cantField.getText();
        int cantInt = Integer.parseInt(cantStr);
        String subTotal;
        float price = AmltpvViewClient.productosModel.getPrice(producto);
        int cantInPool;

        for (int i=0;i<cantInt;i++){
            AmltpvViewClient.db.addProductoToMesasPool(Integer.toString(currentMesa), producto,true);
        }
       
        cantInPool = AmltpvViewClient.db.queryCantOfProducto(Integer.toString(currentMesa),producto);
        if (cantInPool==cantInt){ //Es un categoria nuevo
            subTotal = NumberFormat.getCurrencyInstance(new Locale("es","ES")).format(cantInt*price);
            modelContents.addRow(new Object[] {cantStr,producto,subTotal});
        }
        else if (cantInPool>cantInt){ //Es un categoria que ya esta para actualizar cantidad
            int[] position = new int[2];
            position = getContentsTablePositionWithProducto(producto);
            modelContents.setValueAt(Integer.toString(cantInPool), position[0], 0);
            modelContents.setValueAt(
                    NumberFormat.getCurrencyInstance
                        (new Locale("es","ES")).format((cantInPool)*price),
                                        position[0], 2);
        }
        else{
            System.out.println("Error en pool");
            AmltpvViewClient.util.log("Error grave con mesa " + currentMesa);
        }
        calculateTotal();
    }
    private void introButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_introButtonActionPerformed
        if (AmltpvViewClient.productosModel.getCurrentNode().isLeaf()){
            System.out.println("intro producto");
            int row = tableInfo.getSelectedRow();
            int column = tableInfo.getSelectedColumn();
            String producto = (String) modelInfo.getValueAt(row, column);
            addProductoToContentsTable(producto);
            if (evt == null){
                AmltpvViewClient.productosModel.upCurrentNode(infoLabel);
            }
        }
}//GEN-LAST:event_introButtonActionPerformed

    private void borrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarButtonActionPerformed
        if (!modoBorrando){
            modoBorrando = true;
            this.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
            borrarButton.setText("Modo borrar:ON");
            borrarButton.setForeground(Color.RED);
        }
        else{
            modoBorrando = false;
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            borrarButton.setText("Borrar Producto");
            borrarButton.setForeground(Color.black);
        }
    }//GEN-LAST:event_borrarButtonActionPerformed

    private void contentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contentsTableMouseClicked
        if (modoBorrando){
            Point p = evt.getPoint();
            int row = contentsTable.rowAtPoint(p);
            int column = 1;
            String producto = (String) modelContents.getValueAt(row, column);
            AmltpvViewClient.db.deleteFromMesasPool(Integer.toString(currentMesa),producto);
            modelContents.setRowCount(0);
            fillContentsTable();
            calculateTotal();
        }
    }//GEN-LAST:event_contentsTableMouseClicked

    private void salirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirButtonActionPerformed
        try {
            Conexion conexion = new Conexion(ConectarJDialog.servidor);
            conexion.sendMsg("mesaCerrada@"+currentMesa);
            conexion.waitForMsgs(false);
        } catch (UnknownHostException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        this.dispose();
    }//GEN-LAST:event_salirButtonActionPerformed

    private void imprimirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirButtonActionPerformed
        int rows = modelContents.getRowCount();
        Vector<amltpv.FacturaItem> vec = new Vector();

        for (int i=0;i<rows;i++){
            String cant,prod,subTotal;
            cant = (String) modelContents.getValueAt(i, 0);
            prod = (String) modelContents.getValueAt(i, 1);
            subTotal = (String) modelContents.getValueAt(i, 2);
            vec.add(new amltpv.FacturaItem(cant,prod,subTotal));
        }
        HashMap strings = new HashMap();
        strings.put("fecha", AmltpvViewClient.util.getCurrentTimeString());
        strings.put("nombreNegocio", AmltpvViewClient.db.queryValor("nombreNegocio"));
        strings.put("direccion", AmltpvViewClient.db.queryValor("direccion"));
        strings.put("telefono", AmltpvViewClient.db.queryValor("telefono"));
        strings.put("cif", AmltpvViewClient.db.queryValor("cif"));
        strings.put("email", AmltpvViewClient.db.queryValor("email"));
        strings.put("web", AmltpvViewClient.db.queryValor("web"));
        amltpv.Factura factura = new amltpv.Factura
                (new Integer(currentMesa).toString(),vec,totalLabel.getText(),
                strings);
        
        impresora.setSize(7.5,100);
        impresora.print(factura);
        AmltpvViewClient.db.fromPoolToCobradas(new Integer(currentMesa).toString());
        AmltpvViewClient.changeMesasIcon(Integer.toString(currentMesa), new ImageIcon("imgs/mesa.jpg"));
        AmltpvViewClient.db.emptyPool(Integer.toString(currentMesa));
        AmltpvViewClient.self.cobradasDialog.addMesaCobrada(
                Integer.toString(currentMesa), AmltpvViewClient.util.getTimeString(),
                totalLabel.getText());
        this.salirButtonActionPerformed(null);
    }//GEN-LAST:event_imprimirButtonActionPerformed
    private int[] getPositionWithValue(int tecla){
        int[] result = new int[2];
        int rows = modelInfo.getRowCount();
        for (int i=0;i<rows;i++){
            for (int j=0;j<=3;j++){
                if (modelInfo.getValueAt(i, j).equals(tecla)){
                    result[0]=i;
                    result[1]=j;
                    return result;
                }
            }
        }
        return null;
    }

    private int[] getContentsTablePositionWithProducto(String producto){
        int[] result = new int[2];
        int rows = modelContents.getRowCount();
        for (int i=0;i<rows;i++){
            if (modelContents.getValueAt(i, 1).equals(producto)){
                    result[0]=i;
                    result[1]=1;
                    return result;
            }
        }
        return null;
    }

    private void inputInfo(Enumeration children){
        int tecla = 0;
        int row = 0;
        Boolean goRight = false;
        Boolean goLast = false;
        if (AmltpvViewClient.productosModel.getCurrentNode().isLeaf()){
            System.out.println("leaf");
            int[] position = new int[2];
            if (modeMouse){
                introButtonActionPerformed(null);
            }
            else{
                position = getPositionWithValue(teclaPressed);
                tableInfo.changeSelection(position[0], position[1]+1, false, false);
            }
        }
        else{
            modelInfo.setRowCount(0); //clear table
            while (children.hasMoreElements()){
                if (!goRight){
                    String categoria = children.nextElement().toString();
                    System.out.println("Printing left column " + categoria);
                    modelInfo.addRow(new Object[] {tecla,categoria});
                    goRight = true; //toggle
                    tecla++;
                }
                else {
                    String producto = children.nextElement().toString();
                    System.out.println("Printing right column " + producto);
                    goLast = false; // Porque cambie la tabla a tener 4 columnas solo
                                    // asi que en vez de cambiar el codigo este hack rapido
                                    // para que no imprimiera las ultimas 2 columnas
                    if (goLast){
                        tableInfo.setValueAt(tecla, row, 4);
                        tableInfo.setValueAt(producto, row, 5);
                        row++ ; // go to next row next time
                        tecla++;
                        goLast = false; //reset
                        goRight = false; // reset
                    }
                    else{
                        tableInfo.setValueAt(tecla, row, 2);
                        tableInfo.setValueAt(producto, row, 3);
                        row++;
                        tecla++;
                        goRight = false;
                        //goLast = true;
                    }
                }
            }
        }
 }
 
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton borrarButton;
    private javax.swing.ButtonGroup buttonSalir;
    private javax.swing.JTextField cantField;
    private javax.swing.JTextField codigoTextField;
    private javax.swing.JTable contentsTable;
    private javax.swing.JButton imprimirButton;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JButton introButton;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton salirButton;
    private javax.swing.JTable tableInfo;
    private javax.swing.JLabel totalLabel;
    // End of variables declaration//GEN-END:variables

}
